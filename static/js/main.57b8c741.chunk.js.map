{"version":3,"sources":["Model/StockInfo","components/NavBar.js","components/TextFields.js","components/CustomizedTables.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","react_default","a","createElement","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Menu_default","Typography","variant","container","display","flexWrap","textField","marginLeft","width","dense","marginTop","menu","StyledTableCell","withStyles","head","backgroundColor","palette","common","black","white","body","fontSize","TableCell","StyledTableRow","&:nth-of-type(odd)","background","default","TableRow","name","calories","fat","carbs","protein","rows","overflowX","table","minWidth","App","Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","displayAlert","item","min","setState","StockInfoComponentVisible","state","handleClick","token","stockInfo","login","fetch","method","headers","Content-Type","JSON","stringify","password","provider","userName","then","loginResponse","json","jsonData","console","log","accessToken","_this2","catch","error","Authorization","response","_this3","httpResponseCode","_this4","id","App_StockInfoComponent","text","lib_default","value","onChange","newValue","onRequestSearch","style","margin","maxWidth","totalFillQty","startOfDayQty","endOfDayQty","StockInfoComponent","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.57b8c741.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/StockInfo.fd61a5d0.bin\";","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      \n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"Menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Morrisons\n          </Typography>\n          {/* <Button color=\"inherit\">Login</Button> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200,\n  },\n  dense: {\n    marginTop: 19,\n  },\n  menu: {\n    width: 200,\n  },\n}));\n\nconst currencies = [\n  {\n    value: 'USD',\n    label: '$',\n  },\n  {\n    value: 'EUR',\n    label: '€',\n  },\n  {\n    value: 'BTC',\n    label: '฿',\n  },\n  {\n    value: 'JPY',\n    label: '¥',\n  },\n];\n\nexport default function TextFields() {\n  const classes = useStyles();\n  const [values, setValues] = React.useState({\n    name: 'Cat in the Hat',\n    age: '',\n    multiline: 'Controlled',\n    currency: 'EUR',\n  });\n\n  const handleChange = name => event => {\n    setValues({ ...values, [name]: event.target.value });\n  };\n\n  return (\n    <form className={classes.container} noValidate autoComplete=\"off\">\n      <TextField\n        id=\"standard-name\"\n        label=\"Name\"\n        className={classes.textField}\n        value={values.name}\n        onChange={handleChange('name')}\n        margin=\"normal\"\n      />\n      <TextField\n        id=\"standard-uncontrolled\"\n        label=\"Uncontrolled\"\n        defaultValue=\"foo\"\n        className={classes.textField}\n        margin=\"normal\"\n      />\n      <TextField\n        required\n        id=\"standard-required\"\n        label=\"Required\"\n        defaultValue=\"Hello World\"\n        className={classes.textField}\n        margin=\"normal\"\n      />\n      <TextField\n        error\n        id=\"standard-error\"\n        label=\"Error\"\n        defaultValue=\"Hello World\"\n        className={classes.textField}\n        margin=\"normal\"\n      />\n      <TextField\n        disabled\n        id=\"standard-disabled\"\n        label=\"Disabled\"\n        defaultValue=\"Hello World\"\n        className={classes.textField}\n        margin=\"normal\"\n      />\n      <TextField\n        id=\"standard-password-input\"\n        label=\"Password\"\n        className={classes.textField}\n        type=\"password\"\n        autoComplete=\"current-password\"\n        margin=\"normal\"\n      />\n      <TextField\n        id=\"standard-read-only-input\"\n        label=\"Read Only\"\n        defaultValue=\"Hello World\"\n        className={classes.textField}\n        margin=\"normal\"\n        InputProps={{\n          readOnly: true,\n        }}\n      />\n      <TextField\n        id=\"standard-dense\"\n        label=\"Dense\"\n        className={clsx(classes.textField, classes.dense)}\n        margin=\"dense\"\n      />\n      <TextField\n        id=\"standard-multiline-flexible\"\n        label=\"Multiline\"\n        multiline\n        rowsMax=\"4\"\n        value={values.multiline}\n        onChange={handleChange('multiline')}\n        className={classes.textField}\n        margin=\"normal\"\n      />\n      <TextField\n        id=\"standard-multiline-static\"\n        label=\"Multiline\"\n        multiline\n        rows=\"4\"\n        defaultValue=\"Default Value\"\n        className={classes.textField}\n        margin=\"normal\"\n      />\n      <TextField\n        id=\"standard-helperText\"\n        label=\"Helper text\"\n        defaultValue=\"Default Value\"\n        className={classes.textField}\n        helperText=\"Some important text\"\n        margin=\"normal\"\n      />\n      <TextField\n        id=\"standard-with-placeholder\"\n        label=\"With placeholder\"\n        placeholder=\"Placeholder\"\n        className={classes.textField}\n        margin=\"normal\"\n      />\n      <TextField\n        id=\"standard-textarea\"\n        label=\"With placeholder multiline\"\n        placeholder=\"Placeholder\"\n        multiline\n        className={classes.textField}\n        margin=\"normal\"\n      />\n      <TextField\n        id=\"standard-number\"\n        label=\"Number\"\n        value={values.age}\n        onChange={handleChange('age')}\n        type=\"number\"\n        className={classes.textField}\n        InputLabelProps={{\n          shrink: true,\n        }}\n        margin=\"normal\"\n      />\n      <TextField\n        id=\"standard-search\"\n        label=\"Search field\"\n        type=\"search\"\n        className={classes.textField}\n        margin=\"normal\"\n      />\n      <TextField\n        id=\"standard-select-currency\"\n        select\n        label=\"Select\"\n        className={classes.textField}\n        value={values.currency}\n        onChange={handleChange('currency')}\n        SelectProps={{\n          MenuProps: {\n            className: classes.menu,\n          },\n        }}\n        helperText=\"Please select your currency\"\n        margin=\"normal\"\n      >\n        {currencies.map(option => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </TextField>\n      <TextField\n        id=\"standard-select-currency-native\"\n        select\n        label=\"Native select\"\n        className={classes.textField}\n        value={values.currency}\n        onChange={handleChange('currency')}\n        SelectProps={{\n          native: true,\n          MenuProps: {\n            className: classes.menu,\n          },\n        }}\n        helperText=\"Please select your currency\"\n        margin=\"normal\"\n      >\n        {currencies.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </TextField>\n      <TextField\n        id=\"standard-full-width\"\n        label=\"Label\"\n        style={{ margin: 8 }}\n        placeholder=\"Placeholder\"\n        helperText=\"Full width!\"\n        fullWidth\n        margin=\"normal\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n      />\n      <TextField\n        id=\"standard-bare\"\n        className={classes.textField}\n        defaultValue=\"Bare\"\n        margin=\"normal\"\n        inputProps={{ 'aria-label': 'bare' }}\n      />\n    </form>\n  );\n}\n","import { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport React, { Component, props } from \"react\";\nimport { useRef, useEffect } from \"react\";\n\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.background.default\n    }\n  }\n}))(TableRow);\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return { name, calories, fat, carbs, protein };\n}\n\nconst rows = [\n  createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0)\n  //   createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3),\n  //   createData(\"Eclair\", 262, 16.0, 24, 6.0),\n  //   createData(\"Cupcake\", 305, 3.7, 67, 4.3),\n  //   createData(\"Gingerbread\", 356, 16.0, 49, 3.9)\n];\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n\n    overflowX: \"auto\"\n  },\n  table: {\n    minWidth: 700\n  }\n}));\nclass CustomizedTables extends Component {\n  constructor() {\n    super(props);\n    const classes = useStyles();\n    this.state = {\n      listDataFromChild: null\n    };\n\n    return (\n      <Paper className={classes.root}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>Facing</StyledTableCell>\n              <StyledTableCell align=\"right\">Units High</StyledTableCell>\n              <StyledTableCell align=\"right\">Units Deep</StyledTableCell>\n              <StyledTableCell align=\"right\">Fill QTY</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map(row => (\n              <StyledTableRow key={row.name}>\n                <StyledTableCell component=\"th\" scope=\"row\">\n                  {row.name}\n                </StyledTableCell>\n                <StyledTableCell align=\"right\">{row.calories}</StyledTableCell>\n                <StyledTableCell align=\"right\">{row.fat}</StyledTableCell>\n                <StyledTableCell align=\"right\">{row.carbs}</StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Paper>\n    );\n  }\n  myCallback = dataFromChild => {\n    this.setState({ listDataFromChild: dataFromChild });\n  };\n}\nexport default CustomizedTables;\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport TextFields from \"./components/TextFields\";\nimport SearchBar from \"material-ui-search-bar\";\nimport CustomizedTables from \"./components/CustomizedTables\";\nimport ReactDOM from \"react-dom\";\nimport { StockInfo } from \"./Model/StockInfo\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    stockInfo: new Object();\n\n    this.state = {\n      token: \"\",\n      min: \"\",\n      StockInfoComponentVisible: false,\n      stockInfo: []\n    };\n    this.login();\n    // this.handleClick = this.handleClick.bind(this);\n  }\n  async login() {\n    await fetch(\n      \"https://sit-api.morrisons.com/user/v1/login?apikey=ZwQGsEN0f65kORZ8EVQlJWA2bGNbHls0\",\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          password: \"789987\",\n          provider: \"morrisons\",\n          userName: \"10020030\"\n        })\n      }\n    )\n      .then(loginResponse => loginResponse.json())\n\n      .then(jsonData => {\n        // jsonData is parsed json object received from url\n        console.log(jsonData.accessToken);\n        this.token = jsonData.accessToken;\n      })\n      .catch(error => {\n        // handle your errors here\n        console.error(error);\n      });\n  }\n  displayAlert = item => {\n    // you can access the item object and the event object\n    // alert(item);\n    this.min = item;\n\n    this.setState({\n      StockInfoComponentVisible: !this.state.StockInfoComponentVisible\n    });\n    this.handleClick();\n  };\n\n  async handleClick() {\n    console.log(\"min:::\" + this.min);\n    const response = await fetch(\n      \"https://sit-api.morrisons.com/space/v1/locations/8/items/\" +\n        this.min +\n        \"?exclude=ProductList&apikey=ZwQGsEN0f65kORZ8EVQlJWA2bGNbHls0\",\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.token\n        }\n      }\n    )\n      // .then(response => response.json())\n      .then(response => response.json())\n      // .then(json => {\n      //   this.setState({ stockInfo: json });\n      // })\n      .then(json => {\n        this.setState({ stockInfo: json, StockInfoComponentVisible: true });\n\n        if (this.state.stockInfo.httpResponseCode === 200) {\n          console.log(\"SUCCESSS\");\n          this.setState({ stockInfo: json, StockInfoComponentVisible: true });\n        } else if (this.state.stockInfo.httpResponseCode === 404) {\n          console.log(\"SOMETHING WENT WRONG\");\n          this.setState({ StockInfoComponentVisible: false });\n        }\n      })\n      .catch(error => {\n        this.setState({ StockInfoComponentVisible: false });\n        console.log(\"Catch :=SOMETHING WENT WRONG\");\n        // if (response.status === 404) {\n        //   console.log(\"SOMETHING WENT WRONG\");\n        //   this.setState({ StockInfoComponentVisible: false });\n        // }\n      });\n\n    console.log(\"Stockdata \" + this.stockInfo);\n  }\n\n  render() {\n    var { stockInfo } = this.state;\n    return (\n      <div className=\"button__container\">\n        <NavBar />\n        <div id=\"container\">\n          {this.state.StockInfoComponentVisible && (\n            <StockInfoComponent text={stockInfo}>Button</StockInfoComponent>\n          )}\n        </div>\n        <SearchBar\n          value={this.state.value}\n          onChange={newValue => this.setState({ value: newValue })}\n          onRequestSearch={() => this.displayAlert(this.state.value)}\n          style={{\n            margin: \"0 auto\",\n            maxWidth: 800\n          }}\n        />\n        {this.state.StockInfoComponentVisible ? (\n          <div>\n            <h3 >TotalFillQty: {stockInfo.totalFillQty}</h3>\n          \n            <h3 >Start Of Day Qty: {stockInfo.startOfDayQty} </h3>\n           \n            <h3 >End Of Day Qty: {stockInfo.endOfDayQty}</h3>\n          </div>\n        ) : (\n          <div>\n            <p>{\"No Stock Information Found\"}</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nclass StockInfoComponent extends Component {\n  render() {\n    const greeting = \"Welcome to React\";\n\n    return <p>{\"\"}</p>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}